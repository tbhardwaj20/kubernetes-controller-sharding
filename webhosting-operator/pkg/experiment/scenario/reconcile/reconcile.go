/*
Copyright 2022 Tim Ebert.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package reconcile

import (
	"context"
	"fmt"
	"time"

	"golang.org/x/time/rate"
	"sigs.k8s.io/controller-runtime/pkg/client"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/manager"

	webhostingv1alpha1 "github.com/timebertt/kubernetes-controller-sharding/webhosting-operator/pkg/apis/webhosting/v1alpha1"
	"github.com/timebertt/kubernetes-controller-sharding/webhosting-operator/pkg/experiment"
	"github.com/timebertt/kubernetes-controller-sharding/webhosting-operator/pkg/experiment/generator"
)

const ScenarioName = "reconcile"

var log = logf.Log

func init() {
	experiment.RegisterScenario(&scenario{})
}

type scenario struct {
	done chan struct{}
	mgr  manager.Manager
	client.Client

	labels map[string]string
}

func (s *scenario) Name() string {
	return ScenarioName
}

func (s *scenario) Done() <-chan struct{} {
	return s.done
}

func (s *scenario) AddToManager(mgr manager.Manager) error {
	s.done = make(chan struct{})
	s.mgr = mgr
	s.Client = mgr.GetClient()

	s.labels = map[string]string{
		"generated-by": "experiment",
		"scenario":     ScenarioName,
	}

	return mgr.Add(s)
}

func (s *scenario) Start(ctx context.Context) error {
	log.Info("Scenario started")

	// ensure there are exactly 50 themes generated by this scenario
	log.Info("Ensuring themes")
	if err := generator.EnsureThemes(ctx, s.Client, s.labels, 50); err != nil {
		return err
	}

	// ensure there are exactly 20 projects generated by this scenario
	log.Info("Ensuring projects")
	if err := generator.EnsureProjects(ctx, s.Client, s.labels, 20); err != nil {
		return err
	}

	// ensure there are exactly 10000 websites generated by this scenario
	log.Info("Ensuring websites")
	if err := generator.EnsureWebsites(ctx, s.Client, s.labels, 10000); err != nil {
		return err
	}

	log.Info("Scenario prepared")

	// give monitoring stack some time to observe objects
	select {
	case <-ctx.Done():
		log.Info("Scenario cancelled")
		return ctx.Err()
	case <-time.After(30 * time.Second):
	}

	// trigger individual reconciliations for website every 10s
	if err := (&generator.ForEach[*webhostingv1alpha1.Website]{
		Name:      "website-reconcile-trigger",
		Do:        generator.ReconcileWebsite,
		Every:     10 * time.Second,
		RateLimit: rate.Limit(1000),
		Labels:    s.labels,
	}).AddToManager(s.mgr); err != nil {
		return fmt.Errorf("error adding website-reconcile-trigger: %w", err)
	}

	log.Info("Scenario running")

	select {
	case <-ctx.Done():
		log.Info("Scenario cancelled")
		return ctx.Err()
	case <-time.After(15 * time.Minute):
	}

	log.Info("Scenario finished, cleaning up")

	cleanupCtx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := generator.CleanupProjects(cleanupCtx, s.Client, s.labels); err != nil {
		return err
	}
	if err := generator.CleanupThemes(cleanupCtx, s.Client, s.labels); err != nil {
		return err
	}

	log.Info("Cleanup done")
	close(s.done)
	return nil
}
